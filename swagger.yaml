openapi: 3.0.3
info:
  title: Student & Room Management API
  version: 1.0.0
  description: |
    REST API for managing students and rooms.  
    Supports CRUD for both entities, listing students in a room, and moving a student between rooms.

servers:
  - url: https://api.example.com/v1

paths:
  /students:
    get:
      summary: List all students
      responses:
        "200":
          description: A list of students
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Student"
              example:
                - id: 1
                  name: "Alice"
                  age: 20
                  roomId: 2
                - id: 2
                  name: "Bob"
                  age: 21
                  roomId: null
    post:
      summary: Create a new student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentCreate"
            example:
              name: "Charlie"
              age: 19
              roomId: 3
      responses:
        "201":
          description: Student created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
              example:
                id: 3
                name: "Charlie"
                age: 19
                roomId: 3
        "400":
          $ref: "#/components/responses/BadRequest"

  /students/{studentId}:
    get:
      summary: Get a student by ID
      parameters:
        - $ref: "#/components/parameters/StudentId"
      responses:
        "200":
          description: Student found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
              example:
                id: 1
                name: "Alice"
                age: 20
                roomId: 2
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update a student
      parameters:
        - $ref: "#/components/parameters/StudentId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentUpdate"
            example:
              name: "Alice Updated"
              age: 21
              roomId: 4
      responses:
        "200":
          description: Student updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
              example:
                id: 1
                name: "Alice Updated"
                age: 21
                roomId: 4
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete a student
      parameters:
        - $ref: "#/components/parameters/StudentId"
      responses:
        "204":
          description: Student deleted
        "404":
          $ref: "#/components/responses/NotFound"

  /rooms:
    get:
      summary: List all rooms
      responses:
        "200":
          description: A list of rooms
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Room"
              example:
                - id: 1
                  name: "Room A"
                - id: 2
                  name: "Room B"
    post:
      summary: Create a new room
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomCreate"
            example:
              name: "Room C"
      responses:
        "201":
          description: Room created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
              example:
                id: 3
                name: "Room C"
        "400":
          $ref: "#/components/responses/BadRequest"

  /rooms/{roomId}:
    get:
      summary: Get a room by ID
      parameters:
        - $ref: "#/components/parameters/RoomId"
      responses:
        "200":
          description: Room found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
              example:
                id: 2
                name: "Room B"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update a room
      parameters:
        - $ref: "#/components/parameters/RoomId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomCreate"
            example:
              name: "Room B Updated"
      responses:
        "200":
          description: Room updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
              example:
                id: 2
                name: "Room B Updated"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete a room
      parameters:
        - $ref: "#/components/parameters/RoomId"
      responses:
        "204":
          description: Room deleted
        "404":
          $ref: "#/components/responses/NotFound"

  /rooms/{roomId}/students:
    get:
      summary: List all students in a specific room
      parameters:
        - $ref: "#/components/parameters/RoomId"
      responses:
        "200":
          description: Students in the room
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Student"
              example:
                - id: 1
                  name: "Alice"
                  age: 20
                  roomId: 2
        "404":
          $ref: "#/components/responses/NotFound"

  /students/{studentId}/move:
    post:
      summary: Move a student to another room
      parameters:
        - $ref: "#/components/parameters/StudentId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [roomId]
              properties:
                roomId:
                  type: integer
                  example: 3
      responses:
        "200":
          description: Student moved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
              example:
                id: 1
                name: "Alice"
                age: 20
                roomId: 3
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

components:
  parameters:
    StudentId:
      name: studentId
      in: path
      required: true
      schema:
        type: integer
      description: The ID of the student
    RoomId:
      name: roomId
      in: path
      required: true
      schema:
        type: integer
      description: The ID of the room

  schemas:
    Student:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        age: { type: integer }
        roomId: { type: integer, nullable: true }
    StudentCreate:
      type: object
      required: [name, age]
      properties:
        name: { type: string }
        age: { type: integer }
        roomId: { type: integer, nullable: true }
    StudentUpdate:
      type: object
      properties:
        name: { type: string }
        age: { type: integer }
        roomId: { type: integer, nullable: true }
    Room:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
    RoomCreate:
      type: object
      required: [name]
      properties:
        name: { type: string }

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "ValidationError"
            message: "Age must be greater than 0."
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "NotFound"
            message: "Student with ID 999 not found."

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

