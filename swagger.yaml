openapi: 3.0.3
info:
  title: Student-Room Management API
  version: 1.0.0
  description: |
    REST API for managing students and rooms.
    - CRUD for Students
    - CRUD for Rooms
    - Get all students in a specific room
    - Move a student to another room

servers:
  - url: https://api.example.com/api/v1

paths:
  /students:
    get:
      tags: [Students]
      summary: List all students
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
          description: Page number
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
          description: Items per page
          - in: query
          name: name
          schema: { type: string }
          description: Filter by student name (partial match)
        - in: query
          name: sex
          schema: { type: string, enum: [M, F] }
          description: Filter by sex
        - in: query
          name: birthday_from
          schema: { type: string, format: date }
          description: Filter students born after this date
        - in: query
          name: birthday_to
          schema: { type: string, format: date }
          description: Filter students born before this date
      responses:
        "200":
          description: Paginated list of students
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer, description: Total number of students }
                  page: { type: integer }
                  limit: { type: integer }
                  items:
                    type: array
                    items: { $ref: "#/components/schemas/Student" }
              example:
                total: 53
                page: 1
                limit: 20
                items:
                  - id: 0
                    name: "Peggy Ryan"
                    sex: "F"
                    birthday: "2011-08-22"
                    room: 473
                  - id: 1
                    name: "Christian Bush"
                    sex: "M"
                    birthday: "2004-01-07"
                    room: 743

    post:
      tags: [Students]
      summary: Create a student
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/StudentCreate" }
            example:
              name: "Alice Carter"
              sex: "F"
              birthday: "2010-03-15"
              room: 1
      responses:
        "201":
          description: Student created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Student" }
        "400":
          $ref: "#/components/responses/BadRequest"

  /students/{id}:
    get:
      tags: [Students]
      summary: Get a student by ID
      parameters:
        - $ref: "#/components/parameters/StudentId"
      responses:
        "200":
          description: Student found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Student" }
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags: [Students]
      summary: Update a student
      parameters:
        - $ref: "#/components/parameters/StudentId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/StudentUpdate" }
      responses:
        "200":
          description: Updated student
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Student" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags: [Students]
      summary: Delete a student
      parameters:
        - $ref: "#/components/parameters/StudentId"
      responses:
        "204":
          description: Student deleted
        "404":
          $ref: "#/components/responses/NotFound"

  /students/{id}/move:
    patch:
      tags: [Students]
      summary: Move student to another room
      parameters:
        - $ref: "#/components/parameters/StudentId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [room]
              properties:
                room:
                  type: integer
                  description: Target room ID
            example:
              room: 2
      responses:
        "200":
          description: Student moved successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Student" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"

  /rooms:
    get:
      tags: [Rooms]
      summary: List all rooms
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
          description: Page number
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
          description: Items per page
        - in: query
          name: name
          schema: { type: string }
          description: Filter by room name (partial match)
      responses:
        "200":
          description: Paginated list of rooms
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer, description: Total number of rooms }
                  page: { type: integer }
                  limit: { type: integer }
                  items:
                    type: array
                    items: { $ref: "#/components/schemas/Room" }
              example:
                total: 12
                page: 1
                limit: 20
                items:
                  - id: 1
                    name: "Room #10"
                  - id: 2
                    name: "Room #11"
    post:
      tags: [Rooms]
      summary: Create a room
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/RoomCreate" }
            example:
              name: "Room #10"
      responses:
        "201":
          description: Room created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Room" }
        "400":
          $ref: "#/components/responses/BadRequest"

  /rooms/{id}:
    get:
      tags: [Rooms]
      summary: Get a room by ID
      parameters:
        - $ref: "#/components/parameters/RoomId"
      responses:
        "200":
          description: Room found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Room" }
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags: [Rooms]
      summary: Update a room
      parameters:
        - $ref: "#/components/parameters/RoomId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/RoomUpdate" }
      responses:
        "200":
          description: Updated room
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Room" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags: [Rooms]
      summary: Delete a room
      parameters:
        - $ref: "#/components/parameters/RoomId"
      responses:
        "204":
          description: Room deleted
        "404":
          $ref: "#/components/responses/NotFound"

  /rooms/{id}/students:
    get:
      tags: [Rooms]
      summary: Get all students in a specific room
      parameters:
        - $ref: "#/components/parameters/RoomId"
      responses:
        "200":
          description: List of students in the room
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Student" }
        "404":
          $ref: "#/components/responses/NotFound"

components:
  parameters:
    StudentId:
      name: id
      in: path
      required: true
      schema: { type: integer }
      description: Student ID
    RoomId:
      name: id
      in: path
      required: true
      schema: { type: integer }
      description: Room ID

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
          example:
            code: 404
            message: "Student not found"
    BadRequest:
      description: Invalid input
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
          example:
            code: 400
            message: "Invalid room ID"

  schemas:
    Student:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        sex: { type: string, enum: [M, F] }
        birthday: { type: string, format: date }
        room: { type: integer }
      required: [id, name, sex, birthday, room]
    StudentCreate:
      type: object
      properties:
        name: { type: string }
        sex: { type: string, enum: [M, F] }
        birthday: { type: string, format: date }
        room: { type: integer }
      required: [name, sex, birthday, room]
    StudentUpdate:
      type: object
      properties:
        name: { type: string }
        sex: { type: string, enum: [M, F] }
        birthday: { type: string, format: date }
        room: { type: integer }
    Room:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
      required: [id, name]
    RoomCreate:
      type: object
      properties:
        name: { type: string }
      required: [name]
    RoomUpdate:
      type: object
      properties:
        name: { type: string }
    Error:
      type: object
      properties:
        code: { type: integer }
        message: { type: string }
      required: [code, message]

